{"version":3,"sources":["lem_gmaps.es6"],"names":["factory","define","amd","exports","module","require","jQuery","$","LemGmaps","element","options","_classCallCheck","this","self","$element","settings","extend","map_options","center","lat","lng","zoom","scrollwheel","maxZoom","styles","marker_icon","path","fillColor","fillOpacity","scale","strokeWeight","anchor","google","maps","Point","markers","data_options","data","map","bounds","google_map_markers","init","_createClass","key","value","Map","add_markers","marker_bounds","LatLngBounds","forEach","markerObj","marker","position","fitBounds","i","icon","google_map_marker","Marker","LatLng","push","fn","lemGmaps","$this","opt","arguments","args","Array","prototype","slice","call","length","ret","_typeof","lem_gmaps","apply"],"mappings":"glBAAC,SAAWA,GAGc,kBAAXC,SAAyBA,OAAOC,IACvCD,QAAQ,UAAWD,GACO,mBAAZG,SACdC,OAAOD,QAAUH,EAAQK,QAAQ,WAEjCL,EAAQM,SAIf,SAAUC,GAAG,GAGJC,GAHI,WAKN,QAAAA,GAAYC,EAASC,GAASC,gBAAAC,KAAAJ,EAE1B,IAAIK,GAAOD,IAEXC,GAAKC,SAAWP,EAAEE,GAGlBI,EAAKE,SAAWR,EAAES,QAAO,GAErBC,aACIC,QAASC,IAAK,UAAWC,KAAM,WAC/BC,KAAM,EACNC,aAAa,EACbC,QAAS,GACTC,WAEJC,aACIC,KAAM,6LACNC,UAAW,UACXC,YAAa,EACbC,MAAO,IACPC,aAAc,EACdC,OAAQ,GAAIC,QAAOC,KAAKC,MAAM,GAAI,KAEtCC,YACDzB,GAIHG,EAAKuB,aAAevB,EAAKC,SAASuB,KAAK,YACvCxB,EAAKE,SAAWR,EAAES,QAAO,EAAMH,EAAKE,SAAUF,EAAKuB,cAGnDvB,EAAKyB,IACLzB,EAAK0B,OACL1B,EAAK2B,sBAGL3B,EAAK4B,OA3CH,MAAAC,cAAAlC,IAAAmC,IAAA,OAAAC,MAAA,WAkDF,GAAI/B,GAAOD,IAEXC,GAAKyB,IAAM,GAAIN,QAAOC,KAAKY,IAAIhC,EAAKC,SAAS,GAAID,EAAKE,SAASE,aAE/DJ,EAAKiC,YAAYjC,EAAKE,SAASoB,SAC/BtB,EAAKkC,cAAclC,EAAK2B,uBAvDtBG,IAAA,gBAAAC,MAAA,SA6DQT,GAEV,GAAItB,GAAOD,KAEP2B,EAAS,GAAIP,QAAOC,KAAKe,YAE7Bb,GAAQc,QAAQ,SAAUC,GACtBX,EAAOvB,OAAOkC,EAAUC,OAAOC,YAUnCvC,EAAKyB,IAAIe,UAAUd,MA9EjBI,IAAA,cAAAC,MAAA,SAmFMT,GAER,GAAItB,GAAOD,IAEXuB,GAAQc,QAAQ,SAAUE,EAAQG,GAE9B,GAAI7B,GAAcZ,EAAKE,SAASU,WAGhClB,GAAES,QAAO,EAAMS,EAAa0B,EAAOI,KAEnC,IAAIC,GAAoB,GAAIxB,QAAOC,KAAKwB,QACpCL,SAAU,GAAIpB,QAAOC,KAAKyB,OAAOP,EAAOhC,IAAKgC,EAAO/B,KACpDmC,KAAM9B,EACNa,IAAKzB,EAAKyB,KAIdzB,GAAK2B,mBAAmBmB,MACpBR,OAAQK,EACRrC,IAAKgC,EAAOhC,IACZC,IAAK+B,EAAO/B,YAxGlBZ,IA+GVD,GAAEqD,GAAGC,SAAW,WACZ,GAAIC,GAAQlD,KACRmD,EAAMC,UAAU,GAChBC,EAAOC,MAAMC,UAAUC,MAAMC,KAAKL,UAAW,GAC7CM,EAASR,EAAMQ,OACfhB,MAAAA,GACAiB,MAAAA,EACJ,KAAKjB,EAAI,EAAGA,EAAIgB,EAAQhB,IAKpB,GAJkB,eAAd,KAAOS,EAAP,YAAAS,QAAOT,SAAiC,KAAPA,EACjCD,EAAMR,GAAGmB,UAAY,GAAIjE,GAASsD,EAAMR,GAAIS,GAE5CQ,EAAMT,EAAMR,GAAGmB,UAAUV,GAAKW,MAAMZ,EAAMR,GAAGmB,UAAWR,OAC1C,KAAPM,EAAoB,MAAOA,EAE1C,OAAOT","file":"lem_gmaps.min.js","sourcesContent":[";(function (factory) {\n    'use strict';\n\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n})\n\n(function ($) {\n    'use strict';\n\n    class LemGmaps {\n\n        constructor(element, options) {\n\n            let self = this;\n\n            self.$element = $(element);\n\n            //extend by function call\n            self.settings = $.extend(true, {\n                // lat_shift: 0,\n                map_options: {\n                    center: {lat: 42.877742, lng: -97.380979},\n                    zoom: 1,\n                    scrollwheel: false,\n                    maxZoom: 15,\n                    styles: []\n                },\n                marker_icon: {\n                    path: 'M10.9,0C4.9,0,0,4.9,0,10.9c0,7,9.8,24.7,10.9,24.7c1.2,0,10.9-17.5,10.9-24.7C21.8,4.9,16.9,0,10.9,0z M10.9,15.5c-2.5,0-4.6-2-4.6-4.6s2-4.6,4.6-4.6c2.5,0,4.6,2,4.6,4.6S13.4,15.5,10.9,15.5z',\n                    fillColor: '#882929',\n                    fillOpacity: 1,\n                    scale: 1.1,\n                    strokeWeight: 0,\n                    anchor: new google.maps.Point(20, 20)\n                },\n                markers: []\n            }, options);\n\n\n            //extend by data options\n            self.data_options = self.$element.data('lem-gmap');\n            self.settings = $.extend(true, self.settings, self.data_options);\n\n\n            self.map;\n            self.bounds;\n            self.google_map_markers = [];\n\n\n            self.init();\n\n        }\n\n\n        init() {\n\n            let self = this;\n\n            self.map = new google.maps.Map(self.$element[0], self.settings.map_options);\n\n            self.add_markers(self.settings.markers);\n            self.marker_bounds(self.google_map_markers);\n\n        }\n\n\n\n        marker_bounds(markers) {\n\n            let self = this;\n\n            let bounds = new google.maps.LatLngBounds();\n\n            markers.forEach(function (markerObj) {\n                bounds.extend(markerObj.marker.position);\n            });\n\n            // if (self.settings.lat_shift) {\n            //     if (bounds.getNorthEast().equals(bounds.getSouthWest())) {\n            //         var extendPoint = new google.maps.LatLng(bounds.getNorthEast().lat() + self.settings.lat_shift, bounds.getNorthEast().lng());\n            //         bounds.extend(extendPoint);\n            //     }\n            // }\n\n            self.map.fitBounds(bounds);\n\n        }\n        \n\n        add_markers(markers) {\n\n            let self = this;\n\n            markers.forEach(function (marker, i) {\n                \n                let marker_icon = self.settings.marker_icon;\n\n                //extend individual marker options\n                $.extend(true, marker_icon, marker.icon);\n                \n                let google_map_marker = new google.maps.Marker({\n                    position: new google.maps.LatLng(marker.lat, marker.lng),\n                    icon: marker_icon,\n                    map: self.map\n                });\n\n                // save all markers in array\n                self.google_map_markers.push({\n                    marker: google_map_marker,\n                    lat: marker.lat,\n                    lng: marker.lng\n                });\n            });\n        }\n    }\n\n\n    $.fn.lemGmaps = function() {\n        let $this = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            length = $this.length,\n            i,\n            ret;\n        for (i = 0; i < length; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                $this[i].lem_gmaps = new LemGmaps($this[i], opt);\n            else\n                ret = $this[i].lem_gmaps[opt].apply($this[i].lem_gmaps, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return $this;\n    };\n\n\n});"]}